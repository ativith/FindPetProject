import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  TextInput,
  StyleSheet,
  Image,
  Pressable,
  SafeAreaView,
  Platform,
  Alert,
} from "react-native";
import { KeyboardAwareScrollView } from "react-native-keyboard-aware-scroll-view";
import { useLayoutEffect } from "react";
import { useNavigation } from "@react-navigation/native";
import * as ImagePicker from "expo-image-picker";
import IconButton from "../components/IconButton";
import UploadImage from "../‡∏µuiverse/uploadImage";
import Input from "../components/Input";
import Button from "../components/Button";
import Map from "../components/MapView";
import { supabase } from "../lib/supabase";
import { convertToDateISO } from "../‡πâhelper/convertToDate";
import CustomDropdown from "../components/CustomDropDown";
import CustomCheckbox from "../components/CustomCheckbox";
import {
  petOptions,
  sexOptions,
  haveCollar,
  colorOptions,
  postOptions,
} from "../variable/option";
function AddNewPost() {
  const [image, setImage] = useState(null);
  const [name, setName] = useState("");
  const [species, setSpecies] = useState("");

  const [age, setAge] = useState("");
  const [reward, setReward] = useState("");
  const [collar, setCollar] = useState(""); //‡∏õ‡∏•‡∏≠‡∏Å‡∏Ñ‡∏≠
  const [details, setDetails] = useState("");
  const [highlight, setHighlight] = useState(""); //‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô
  const [dateLost, setDateLost] = useState(null);
  const [location, setLocation] = useState("");
  const [latitude, setLatitude] = useState(null);
  const [longitude, setLongitude] = useState(null);

  const [type, setType] = useState(null);
  const [sex, setSex] = useState(null);

  const [speciesOptions, setSpeciesOptions] = useState([]);
  const [typeOfPost, setTypeOfPost] = useState();

  useEffect(() => {
    if (type) {
      setSpeciesOptions(
        petOptions[type].breeds.map((sp) => ({
          label: sp.label,
          value: sp.value,
        }))
      );
      setSpecies(null); // reset ‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πà‡∏≤
    }
  }, [type]);

  const [selectedColors, setSelectedColors] = useState([]);

  const pickImage = async () => {
    // No permissions request is necessary for launching the image library
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ["images"],
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });

    if (!result.canceled) {
      const selectedUri = result.assets[0].uri;
      setImage(selectedUri);
    }
  };

  async function submitInfo() {
    console.log("‡∏Å‡∏î‡πÄ‡πÄ‡∏•‡πâ‡∏ß");
    if (
      !image ||
      !typeOfPost ||
      !name ||
      !type ||
      !species ||
      !selectedColors ||
      !collar ||
      !details ||
      !location ||
      !sex
    ) {
      Alert.alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
      console.log(‡πÄ‡∏ä‡πá‡∏Ñ‡∏ü‡∏≠‡∏£‡πå‡∏°);
      return;
    }
    if (typeOfPost === "findpet") {
      if (!age || !reward || !highlight || !dateLost) {
        Alert.alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ï‡∏≤‡∏°‡∏´‡∏≤‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏´‡∏≤‡∏¢");
        return;
      }
    }
    try {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      if (!user) {
        alert("‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô");
        return;
      }
      const fileExt = image.split(".").pop();
      const fileName = `photo_${Date.now()}.${fileExt}`;
      const arrayBuffer = await fetch(image).then((res) => res.arrayBuffer());

      //upload to bucket
      const { data, error: uploadError } = await supabase.storage
        .from("images")
        .upload(fileName, arrayBuffer, {
          contentType: "image/jpeg",
          metadata: {
            //‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡πà‡πÄ‡πÄ‡∏ô‡∏ö‡πÑ‡∏õ‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ‡πÄ‡∏ä‡πà‡∏ô ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô policy
            owner: user.id, // ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á
            description: "My photo", // ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
          },
        });

      if (uploadError) {
        throw uploadError;
      }

      // ‡∏î‡∏∂‡∏á public URL from bucket ‡∏°‡∏≤‡πÉ‡∏ä‡πâ
      const publicUrl = supabase.storage.from("images").getPublicUrl(fileName)
        .data.publicUrl;
      console.log(publicUrl);

      const { error } = await supabase.from("post").insert([
        {
          user_id: user.id,
          image_url: publicUrl,
          name,
          type,
          species,
          color: selectedColors,
          age: age ? parseInt(age) : null,
          collar,
          detail: details,
          highlight: highlight ? highlight : null,
          lost_date: dateLost ? convertToDateISO(dateLost) : null,
          location,
          latitude,
          longitude,
          reward: reward ? reward : null,
          sex,
          typeofpost: typeOfPost,
        },
      ]);

      if (error) {
        console.error("‚ùå Insert error:", error);
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + error.message);
      } else {
        alert("‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      }
    } catch (e) {
      console.error("üî• Exception caught:", e);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: " + e.message);
    }
  }
  return (
    <SafeAreaView>
      <KeyboardAwareScrollView>
        <View style={styles.container}>
          <UploadImage picture={image}>
            <IconButton
              icon="camera"
              title="choose the image"
              size={15}
              color="black"
              onPress={pickImage}
              style={{
                position: "absolute",
                top: 10,
                right: 10,
              }}
            />
          </UploadImage>
        </View>
        <View style={styles.inputContainer}>
          <Text>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå</Text>
          <CustomDropdown
            value={typeOfPost}
            setValue={setTypeOfPost}
            items={postOptions}
            placeholder="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå"
            zIndex={3000}
          />
          <Input
            value={name}
            placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå"
            label="‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á"
            updateValue={(text) => setName(text)}
          />
          <Text>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå</Text>
          <CustomDropdown
            value={type}
            setValue={setType}
            items={Object.keys(petOptions).map((pet) => ({
              label: petOptions[pet].label,
              value: pet,
            }))}
            placeholder="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå"
            zIndex={2500}
          />
          <Text>‡∏™‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå</Text>
          <CustomDropdown
            value={species}
            setValue={setSpecies}
            items={speciesOptions}
            placeholder="‡∏™‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå"
            zIndex={2000}
          />
          <Text>‡πÄ‡∏û‡∏®</Text>
          <CustomDropdown
            value={sex}
            setValue={setSex}
            items={sexOptions}
            zIndex={1500}
          />
          {typeOfPost === "findpet" && (
            <>
              <Input
                value={age}
                placeholder="2‡∏õ‡∏µ"
                label="‡∏≠‡∏≤‡∏¢‡∏∏"
                updateValue={(text) => setAge(text)}
              />
              <Input
                value={reward}
                placeholder="2000‡∏ö‡∏≤‡∏ó"
                label="‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•"
                updateValue={(text) => setReward(text)}
              />

              <Input
                value={highlight}
                placeholder="‡∏´‡∏≤‡∏á‡∏¢‡∏≤‡∏ß‡∏õ‡∏•‡∏≤‡∏¢‡∏á‡∏≠ ‡∏´‡∏π‡∏ã‡πâ‡∏≤‡∏¢‡∏°‡∏µ‡∏£‡∏≠‡∏¢‡πÄ‡πÄ‡∏´‡∏ß‡πà‡∏á"
                label="‡∏à‡∏∏‡∏î‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï"
                updateValue={(text) => setHighlight(text)}
              />

              <Input
                value={dateLost}
                placeholder="05/07/2025"
                label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢"
                updateValue={(text) => setDateLost(text)}
              />
            </>
          )}
          <Text>‡∏õ‡∏•‡∏≠‡∏Å‡∏Ñ‡∏≠</Text>
          <CustomDropdown
            value={collar}
            setValue={setCollar}
            items={haveCollar}
            zIndex={1000}
          />
          <Input
            value={details}
            placeholder=""
            label="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏¢"
            updateValue={(text) => setDetails(text)}
          />

          <Input
            value={location}
            placeholder=""
            label="‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢"
            updateValue={(text) => setLocation(text)}
          />
        </View>
        <Text>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ</Text>
        <View style={styles.checkBoxContainer}>
          {colorOptions.map((color) => (
            <CustomCheckbox
              key={color.key} // ‡πÉ‡∏ä‡πâ color.key ‡πÄ‡∏õ‡πá‡∏ô key
              label={color.label} // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏µ‡πÑ‡∏ó‡∏¢
              value={color.key} // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô key ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
              selectedValues={selectedColors}
              setSelectedValues={setSelectedColors}
            />
          ))}
        </View>
        <Text>‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {selectedColors.join(", ")}</Text>
        <Map setLatitude={setLatitude} setLongitude={setLongitude} />
        <View style={{ alignSelf: "flex-end", margin: 10 }}>
          <Button title="Post" onPress={submitInfo} />
        </View>
      </KeyboardAwareScrollView>
    </SafeAreaView>
  );
}

export default AddNewPost;
const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: "center",
  },

  image: {
    width: 200,
    height: 200,
  },
  inputContainer: {
    marginHorizontal: 10,
    marginTop: 15,
  },
  checkBoxContainer: {
    flexDirection: "row",
    justifyContent: "space-between",

    flexWrap: "wrap",
    marginHorizontal: 20,
  },
});
